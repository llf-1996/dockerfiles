user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 768;
    # multi_accept on;
}

http {
    # 新增
    upstream uwsgi_servers {
        server 127.0.0.1:8001;
        server 127.0.0.1:8002;
    }
    
    ##
    # Basic Settings
    ##

    # 客户端连接保持会话超时时间，超过这个时间，服务器断开这个链接。
    keepalive_timeout 60;

    # 设置请求头的超时时间，可以设置低点。
    # 如果超过这个时间没有发送任何数据，nginx将返回request time out的错误。
    client_header_timeout 15;

    # 设置请求体的超时时间，可以设置低点。
    # 如果超过这个时间没有发送任何数据，nginx将返回request time out的错误。
    client_body_timeout 15;

    # 响应客户端超时时间
    # 如果超过这个时间，客户端没有任何活动，nginx关闭连接。
    send_timeout 15;

    # 上传文件大小限制
    client_max_body_size 10m;

    # 启用sendfile()系统调用来替换read()和write()调用，减少系统上下文切换从而提高性能，当 nginx 是静态文件服务器时，能极大提高nginx的性能表现，而当 nginx 是反向代理服务器时，则没什么用了。
    sendfile on;
    # tcp_nopush：该指令必须在sendfile打开的状态下才会生效，主要是用来提升网络包的传输'效率'
    tcp_nopush on;
    # tcp_nodelay：该指令必须在keep-alive连接开启的情况下才生效，来提高网络包传输的'实时性'
    tcp_nodelay on;

    # 客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置。
    # 一般一个请求头的大小不会超过 1k，不过由于一般系统分页都要大于1k
    client_header_buffer_size 2k;

    # 这个将为打开文件指定缓存，默认是没有启用的。
    # max指定缓存数量，建议和打开文件数一致，inactive 是指经过多长时间文件没被请求后删除缓存。
    open_file_cache max=102400 inactive=20s;

    # 这个是指多长时间检查一次缓存的有效信息。
    open_file_cache_valid 30s;

    # 告诉nginx关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间。
    reset_timedout_connection on;

    # types_hash_max_size影响散列表的冲突率。types_hash_max_size越大，就会消耗更多的内存，但散列key的冲突率会降低，检索速度就更快。types_hash_max_size越小，消耗的内存就越小，但散列key的冲突率可能上升。默认为1024
    types_hash_max_size 1024;
    # server_tokens off;
    
    # server_names_hash_bucket_size 64;
    # server_name_in_redirect off;
    
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    ##
    # SSL Settings
    ##
    
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;
    
    ##
    # Logging Settings
    ##
    
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    
    ##
    # Gzip Settings
    ##
    
    # 开启gzip压缩功能
    gzip on;

    # 设置允许压缩的页面最小字节数; 这里表示如果文件小于10k，压缩没有意义.
    gzip_min_length 10k;

    # 设置压缩比率，最小为1，处理速度快，传输速度慢；
    # 9为最大压缩比，处理速度慢，传输速度快; 推荐6
    gzip_comp_level 6;

    # 设置压缩缓冲区大小，此处设置为16个8K内存作为压缩结果缓冲
    gzip_buffers 16 8k;

    # 设置哪些文件需要压缩,一般文本，css和js建议压缩。图片视需要要锁。
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    
    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 6;
    # gzip_buffers 16 8k;
    # gzip_http_version 1.1;
    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    ##
    # Virtual Host Configs
    ##
    
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
    
    # 新增
    server {
        listen 80;
        # 域名：.表示映射一级域名和二级域名，多个使用空格分隔
        server_name .lilinfeng.work;
        # http请求重定向至HTTPS
        return 301 https://www.lilinfeng.work$request_uri;
    }
    server {
        listen 443 ssl;
        # server_name 域名/ip
        server_name .lilinfeng.work;
        if ($http_host ~ "^lilinfeng.work$") {
            # rewrite ^(.*)$ https://www.lilinfeng.work$1 permanent;
            return 301 https://www.lilinfeng.work$request_uri;
        }
        # 证书文件
        ssl_certificate /home/deployment/aibiancheng123/deploy_conf/confs/ssl/lilinfeng.work.pem;
        # 秘钥文件
        ssl_certificate_key /home/deployment/aibiancheng123/deploy_conf/confs/ssl/lilinfeng.work.key;
        # 协议
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
    
        charset utf-8;
        # 日志文件位置
        access_log /var/log/nginx/nginx-uwsgi-https.log;

        location = /robots.txt {
            default_type text/html;
            add_header Content-Type "text/plain; charset=UTF-8";
#             return 200 "User-Agent: *\nDisallow: /";
            return 200 "User-Agent: *\nAllow: /";
            # alias /***/robots.txt;
        }
        location / {
            root /home/deployment/aibiancheng123vue/dist;
            index index.html index.htm;
            try_files $uri $uri/ /index.html;
        }
        location /api/ {
            # proxy_pass http://uwsgi_servers;
            include /etc/nginx/uwsgi_params;
            uwsgi_pass uwsgi_servers;   # 使用uwsgi_pass, 而不是proxy_pass
            uwsgi_read_timeout 600; # 指定接收uWSGI应答的超时时间
            uwsgi_connect_timeout 600;  # 指定连接到后端uWSGI的超时时间。
            uwsgi_send_timeout 600; # 指定向uWSGI传送请求的超时时间

            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_set_header X-Real-IP  $remote_addr;
        }
        location /admin/ {
            # proxy_pass http://uwsgi_servers;

            include /etc/nginx/uwsgi_params;
            uwsgi_pass uwsgi_servers;   # 使用uwsgi_pass, 而不是proxy_pass
            uwsgi_read_timeout 600; # 指定接收uWSGI应答的超时时间
            uwsgi_connect_timeout 600;  # 指定连接到后端uWSGI的超时时间。
            uwsgi_send_timeout 600; # 指定向uWSGI传送请求的超时时间

            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_set_header X-Real-IP  $remote_addr;
        }
        location /static {
            alias /home/deployment/aibiancheng123/static;
        }
    }

}


#mail {
#	# See sample authentication script at:
#	# http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
# 
#	# auth_http localhost/auth.php;
#	# pop3_capabilities "TOP" "USER";
#	# imap_capabilities "IMAP4rev1" "UIDPLUS";
# 
#	server {
#		listen     localhost:110;
#		protocol   pop3;
#		proxy      on;
#	}
# 
#	server {
#		listen     localhost:143;
#		protocol   imap;
#		proxy      on;
#	}
#}
